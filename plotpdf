#!/usr/bin/env python3
import argparse

from pdfstat import pdfstat
import numpy as np
import matplotlib.pyplot as plt
import sys
from matplotlib.dates import DateFormatter, DayLocator, MonthLocator
from datetime import datetime
from itertools import takewhile

def plot_data(data, ax):
    data = np.array(data)
    ax.plot(data[:,1], data[:,0])
def plot_goal(first, last, goal, ax):
    # TODO: Use axline once matplotlib 3.3 is released
    # ax.axline((data[0],0), slope=goal_rate)
    delta_time = last.time-first.time
    ax.plot([first.time, last.time], [first.page, first.page + delta_time.days*goal], '--')
def make_plot(data, outpath, goal_rate):
    fig, ax = plt.subplots()
    plot_data(data, ax)
    if goal_rate:
        plot_goal(data[-1], data[0], goal_rate, ax)
    ax.set_title("The Art of Electronics", x=0.5, y=0.9, fontsize=16)

    # ax.set_xlabel('x label')
    # ax.set_ylabel('y label')

    # ax.grid()
    # bordercol = ""
    # ax.tick_params(color=bordercol, labelcolor=bordercol)
    # for spine in ax.spines.values():
    #     spine.set_edgecolor(bordercol)

    ax.xaxis.set_major_locator(MonthLocator())
    ax.xaxis.set_minor_locator(DayLocator(interval=2))
    ax.xaxis.set_major_formatter(DateFormatter('%b'))

    plt.setp(ax.get_xticklabels(), rotation=30, ha="right", rotation_mode="anchor")
    fig.tight_layout()
    fig.savefig(outpath, transparent=True)

def get_data(path, days):
    ps = pdfstat.PdfStat()
    p = pdfstat.normalized_path(path)
    if not ps.db.is_tracked(p):
        sys.exit("Document not tracked!")
    all_data = ps.db.doc_data(p)
    now = datetime.now()
    return list(takewhile(lambda x: (now-x.time).days < days, all_data))
def parse_args():
    parser = argparse.ArgumentParser(description="Make a graph displaying progress of reading documents.")
    parser.add_argument("doc", type=pdfstat.normalized_path, help="The document")
    parser.add_argument("out", help="The output file.")
    parser.add_argument("--goal", help="Goal pages/day", type=float)
    parser.add_argument("--days", help="How many days to plot", default=30, type=int)
    return parser.parse_args()

args = parse_args()
data = get_data(args.doc, args.days)
make_plot(data, args.out, args.goal)